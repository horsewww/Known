@inherits AppLayout
@inject INotificationService _notice

<KError OnError="OnError">
    <CascadingValue Value="this">
        @if (IsMobile)
        {
            <div class="kui-app">
                @if (!IsHome)
                {
                    <div class="kui-app-nav">
                        @if (!IsTab)
                        {
                            <span class="back" @onclick="e=>Back()">
                                <Icon Type="left" Theme="outline" />
                                <span>返回</span>
                            </span>
                        }
                        @CurrentMenu?.Name
                    </div>
                }
                <div class="@PageClass">
                    <Spin Spinning="showSpin" Tip="@spinTip">
                        @Body
                    </Spin>
                </div>
                @if (IsTab)
                {
                    <AppTab Items="Config.AppTabMenus" />
                }
            </div>
        }
        else
        {
            <Spin Spinning="showSpin" Tip="@spinTip">
                <Layout Style="min-height:100vh;">
                    @if (IsLoaded)
                    {
                        <Sider Breakpoint="@BreakpointType.Lg" CollapsedWidth="60" Collapsible>
                            <div class="kui-logo"><img src="@Context.LogoUrl" /></div>
                            <AntMenu Accordion="Context.UserSetting.Accordion" Items="UserMenus" />
                        </Sider>
                        <Layout>
                            <Header Class="kui-header">
                                <NavBreadcrumb CurrentMenu="CurrentMenu" OnHome="OnHome" />
                                <NavTopRight OnMenuClick="OnMenuClick" />
                            </Header>
                            <Content Class="@Content">
                                <div style="margin:0 10px;min-height:360px;">
                                    @Body
                                </div>
                            </Content>
                            @if (AntConfig.Option.Footer != null)
                            {
                                <Footer Style="text-align:center">@AntConfig.Option.Footer</Footer>
                            }
                            else
                            {
                                <Footer Style="text-align:center"><PageFooter /></Footer>
                            }
                        </Layout>
                    }
                </Layout>
            </Spin>
        }
        @if (IsLogin && !IsMobile)
        {
            <Drawer Closable="true" @bind-Visible="showSetting" Placement="right" Title='(Language["Nav.Setting"])' Width="300">
                <Known.Blazor.SettingForm @ref="setting" />
            </Drawer>
        }
    </CascadingValue>
</KError>

@code {
    private string spinTip = "";
    private bool showSpin = false;
    //App
    private bool IsHome => CurrentMenu?.Id == "Home";
    private bool IsTab => CurrentMenu?.Previous == null;
    private string PageClass => CssBuilder.Default("kui-app-page").AddClass("nav", !IsHome).AddClass("tab", IsTab).BuildClass();
    //Admin
    private bool showSetting = false;
    private Known.Blazor.SettingForm setting;
    private string Content => Context.UserSetting.MultiTab ? "kui-tabs" : "kui-page";

    public override async Task ShowSpinAsync(string text = null)
    {
        await base.ShowSpinAsync(text);
        showSpin = true;
        spinTip = text;
        StateChanged();
    }

    public override void HideSpin()
    {
        showSpin = false;
        StateChanged();
    }

    //Admin
    private void OnHome() => OnMenuClick("home");

    private void OnMenuClick(string id)
    {
        switch (id)
        {
            case "home":
                NavigateTo("/");
                break;
            case "profile":
                NavigateTo("/profile");
                break;
            case "logout":
                UI.Confirm(Language["Tip.Exits"], SignOutAsync);
                break;
            case "setting":
                showSetting = true;
                StateChanged();
                break;
        }
    }

    protected override Task OnError(Exception ex)
    {
        var config = new NotificationConfig
        {
            Message = Language["Title.Error"],
            Description = ex.Message,
            Placement = NotificationPlacement.BottomRight,
            Duration = null
        };
        return _notice.Error(config);
    }
}