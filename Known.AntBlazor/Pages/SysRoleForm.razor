@inherits Blazor.SysRoleForm

<div class="role" style="display:flex;">
    <div style="width:400px;padding-right:20px;">
        <DataForm Model="Model" />
    </div>
    <div style="width:260px;">
        <div>模块</div>
        <AntTree Model="tree" />
    </div>
    <div style="background-color:#f5f5f5;width:160px;">
        <div>
            <span>按钮</span>
            @* <Checkbox Disabled="Model.IsView" Indeterminate="indButton" CheckedChanged="ButtonAllChanged" /> *@
        </div>
        <CheckboxGroup Disabled="CheckDisabled" Options="allButtons" ValueChanged="OnButtonChanged" />
    </div>
    <div style="background-color:#f1f1f1;width:160px;">
        <div>
            <span>栏位</span>
            @* <Checkbox Disabled="Model.IsView" Indeterminate="indColumn" CheckedChanged="ColumnAllChanged" /> *@
        </div>
        <CheckboxGroup Disabled="CheckDisabled" Options="allColumns" ValueChanged="OnColumnChanged" />
    </div>
</div>

<style>
     .role .ant-checkbox-group {display:flex;flex-direction:column;padding:5px;}
</style>

@code {
    private TreeModel tree;
    private Known.MenuItem current;
    private bool CheckDisabled => Model.IsView || current == null || !current.Checked;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        tree = new TreeModel
        {
            Checkable = true,
            IsView = Model.IsView,
            Data = Model.Data.Menus,
            DefaultCheckedKeys = Model.Data.MenuIds.ToArray(),
            OnNodeClick = OnTreeClick,
            OnNodeCheck = OnTreeCheck
        };
    }

    private void OnTreeClick(Known.MenuItem item)
    {
        SelectNode(item);
        InvokeAsync(StateHasChanged);
    }

    private void OnTreeCheck(Known.MenuItem item)
    {
        SelectNode(item);

        var btnItems = item.Checked ? allButtons.Select(o => o.Value).ToArray() : null;
        var colItems = item.Checked ? allColumns.Select(o => o.Value).ToArray() : null;
        allButtons.ForEach(o => o.Checked = item.Checked);
        allColumns.ForEach(o => o.Checked = item.Checked);
        OnButtonChanged(btnItems);
        OnColumnChanged(colItems);

        Model.Data.MenuIds.Remove(item.Id);
        if (item.Checked)
            Model.Data.MenuIds.Add(item.Id);
        InvokeAsync(StateHasChanged);
    }

    private CheckboxOption[] allButtons = [];
    // private bool indButton;
    // private bool checkButton;
    // private void ButtonAllChanged()
    // {
    //     checkButton = !checkButton;
    //     allButtons.ForEach(o => o.Checked = checkButton);
    // }

    private void OnButtonChanged(string[] items)
    {
        //indButton = Indeterminate(allButtons);
        Model.Data.MenuIds.RemoveAll(m => m.StartsWith($"b_{current.Id}"));
        if (items != null && items.Length > 0)
            Model.Data.MenuIds.AddRange(items);
    }

    private CheckboxOption[] allColumns = [];
    // private bool indColumn;
    // private bool checkColumn;
    // private void ColumnAllChanged()
    // {
    //     checkColumn = !checkColumn;
    //     allColumns.ForEach(o => o.Checked = checkColumn);
    // }

    private void OnColumnChanged(string[] items)
    {
        //indColumn = Indeterminate(allColumns);
        Model.Data.MenuIds.RemoveAll(m => m.StartsWith($"c_{current.Id}"));
        if (items != null && items.Length > 0)
            Model.Data.MenuIds.AddRange(items);
    }

    private void SelectNode(Known.MenuItem item)
    {
        current = item;
        allButtons = current.GetAllActions().ToCheckboxOptions(o =>
        {
            o.Checked = Model.Data.MenuIds.Contains(o.Value);
            o.Disabled = Model.IsView;
        });

        allColumns = current.GetAllColumns().ToCheckboxOptions(o =>
        {
            o.Checked = Model.Data.MenuIds.Contains(o.Value);
            o.Disabled = Model.IsView;
        });
    }

    // private bool Indeterminate(CheckboxOption[] options)
    // {
    //     return options.Count(o => o.Checked) > 0 && options.Count(o => o.Checked) < options.Count();
    // }
}