@inherits BasePage
@attribute [Page(NoBreadcrumb = true)]

<GridRow>
    <GridCol Span="24">
        <div class="known">
            <div class="known-desc">
                <strong>Known是基于C#和Blazor的快速开发框架，开箱即用，跨平台，一处代码，多处运行。</strong><br />
                - 模块化，单页应用，混合桌面应用，Web和桌面共享一处代码。<br />
                - 包含模块、字典、组织、角色、用户、日志、消息、工作流、定时任务等功能。<br />
                - 低代码、简洁、易扩展，让开发更简单、更快捷！<br />
                - 如果对您有帮助，请为她点亮一颗心，感谢支持开源！
            </div>
            <div class="known-url">
                官网网站：<a href="http://known.pumantech.com" target="_blank">官网</a>
                <a href="http://known.pumantech.com/doc" target="_blank">文档</a><br />
                源码下载：<a href="https://gitee.com/known/Known" target="_blank">GITEE</a>
                <a href="https://github.com/known/Known" target="_blank">GITHUB</a><br />
                交流群号：<img src="https://img.shields.io/badge/QQ群-865982686-blue" alt="865982686" /><br />
                <a href="https://gitee.com/known/Known/stargazers" target="_blank"><img src="https://gitee.com/known/Known/badge/star.svg?theme=dark" alt="star"></a>
                <a href="https://github.com/known/Known" target="_blank"><img src="https://img.shields.io/github/stars/known/known?color=%231890FF" alt="stars"></a>
            </div>
        </div>
    </GridCol>
</GridRow>
<GridRow>
    <GridCol Span="24">
        <div class="ws-space">
            <div class="ws-welcome">
                <img class="ws-avatar" src="@user?.AvatarUrl" />
                <div class="ws-info">
                    <span class="ws-name">@info?.Greeting</span>
                    <span class="ws-tips">@Language["Home.Today"].Replace("{date}", DateTime.Now.ToString("yyyy-MM-dd dddd"))</span>
                </div>
            </div>
            <ul class="count">
                <li>
                    <span class="name">@Language["Home.UserCount"]<span class="month">@Language["Home.Total"]</span></span>
                    <span class="amount">@info?.Statistics?.UserCount</span>
                </li>
                <li>
                    <span class="name">@Language["Home.LogCount"]<span class="month">@Language["Home.Total"]</span></span>
                    <span class="amount">@info?.Statistics?.LogCount</span>
                </li>
            </ul>
        </div>
    </GridCol>
</GridRow>
<GridRow>
    <GridCol Span="14">
        <div class="ws-chart">
            <Card Style="height:100%;">
                <CardTabs>
                    <Tabs DefaultActiveKey="1">
                        <TabPane Key="1">
                            <TabTemplate>@Language["Home.LogStatistic"]</TabTemplate>
                            <ChildContent>
                                <AntDesign.Charts.Column Config="chartConfig" Data="chartData" />
                            </ChildContent>
                        </TabPane>
                    </Tabs>
                </CardTabs>
            </Card>
        </div>
    </GridCol>
    <GridCol Span="10">
        <div class="ws-func">
            <Card Title="@Language["Home.CommonFunc"]" Style="height:100%;">
                @if (visitMenus != null && visitMenus.Count > 0)
                {
                    foreach (var item in visitMenus)
                    {
                        <div class="ws-func-menu" @onclick="e => Context.Navigate(item)">
                            <Icon Type="@item.Icon" Theme="outline" />
                            <span class="name">@Language[$"Menu.{item.Code}"]</span>
                        </div>
                    }
                }
            </Card>
        </div>
    </GridCol>
</GridRow>

@code {
    private UserInfo user;
    private HomeInfo info;
    private object[] chartData;
    private List<Known.MenuItem> visitMenus;
    private ColumnConfig chartConfig;

    protected override async Task OnInitPageAsync()
    {
        await base.OnInitPageAsync();

        chartConfig = new()
        {
            Name = Language["Home.VisitTitle"].Replace("{month}", $"{DateTime.Now:yyyyMM}"),
            Height = 274,
            Padding = "auto",
            XField = "key",
            YField = "value",
            Meta = new
            {
                Key = new { Alias = Language["Home.Date"] },
                Value = new { Alias = Language["Home.Count"] }
            }
        };

        var service = new Services.HomeService { Context = Context };
        info = await service.GetHomeAsync();
        chartData = info?.Statistics?.LogDatas?.FirstOrDefault()?.Series.Select(d => new { d.Key, d.Value }).ToArray();
        visitMenus = Context.GetMenus(info?.VisitMenuIds);
    }
}