@using Microsoft.AspNetCore.Components.Forms
@typeparam TItem where TItem : class, new()

<Form @ref="_form" TModel="TItem" Model="@Model.Data">
    @if (Model.Fields != null && Model.Fields.Any())
    {
        foreach (var field in Model.Fields)
        {
            var column = field.Column;
            var label = column.Property.DisplayName();
            var required = column.Property.IsRequired();
            <GridRow>
                <GridCol Span="24">
                    <FormItem LabelColSpan="4" Label="@label" Required="@required">
                        @if (column.IsFile || column.IsMultiFile)
                        {
                            var attrs = new Dictionary<string, object>();
                            if (column.IsMultiFile)
                                attrs.Add("multiple", true);

                            <InputFile @attributes="attrs" OnChange="e=>OnFilesChanged(e,column)" />
                        }
                        else
                        {
                            @field.InputTemplate
                        }
                    </FormItem>
                </GridCol>
            </GridRow>
        }
    }
</Form>

@code {
    AntDesign.Internal.IForm _form;

    [Parameter] public FormModel<TItem> Model { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            Model.OnValidate = _form.Validate;
        base.OnAfterRender(firstRender);
    }

    private void OnFilesChanged(InputFileChangeEventArgs e, ColumnAttribute column)
    {
        if (column.IsMultiFile)
        {
            var files = e.GetMultipleFiles();
            Model.Files[column.Property.Name] = files.ToList();
        }
        else
        {
            Model.Files[column.Property.Name] = [e.File];
        }
    }
}