@inherits Known.Razor.SysRoleForm

<div style="display:flex;">
    <div style="width:400px;padding-right:20px;">
        <Form @ref="_form" Model="@Model.Data" LabelColSpan="4">
            <FormItem>
                <Input @bind-Value="@context.Name" Disabled="@Model.IsView" />
            </FormItem>
            <FormItem>
                <Switch @bind-Value="@context.Enabled" Disabled="@Model.IsView" />
            </FormItem>
            <FormItem>
                <TextArea @bind-Value="@context.Note" Disabled="@Model.IsView" />
            </FormItem>
        </Form>
    </div>
    <div style="width:260px;">
        <div>模块</div>
        <Tree TItem="Known.MenuItem" ShowIcon Checkable Disabled="Model.IsView"
              DataSource="Model.Data.Menus" OnClick="OnTreeClick"
              DefaultCheckedKeys="Model.Data.MenuIds"
              DisabledExpression="x => !x.DataItem.Enabled"
              KeyExpression="x => x.DataItem.Id"
              TitleExpression="x => x.DataItem.Name"
              IconExpression="x => x.DataItem.Icon"
              ChildrenExpression="x => x.DataItem.Children"
              IsLeafExpression="x => x.DataItem.Children?.Count == 0" />
    </div>
    <div style="background-color:#f5f5f5;width:160px;">
        <div>
            <span>按钮</span>
            <Checkbox Disabled="Model.IsView" Indeterminate="@IndeterminateButton" Checked="@CheckAllButton" CheckedChanged="ButtonAllChanged" />
        </div>
        <CheckboxGroup Disabled="Model.IsView" Options="@checkAllButtons" ValueChanged="OnButtonChanged" />
    </div>
    <div style="background-color:#f1f1f1;width:160px;">
        <div>
            <span>栏位</span>
            <Checkbox Disabled="Model.IsView" Indeterminate="@IndeterminateColumn" Checked="@CheckAllColumn" CheckedChanged="ColumnAllChanged" />
        </div>
        <CheckboxGroup Disabled="Model.IsView" Options="@checkAllColumns" ValueChanged="OnColumnChanged" />
    </div>
</div>

@code {
    AntDesign.Internal.IForm _form;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            Model.OnValidate = _form.Validate;
        base.OnAfterRender(firstRender);
    }

    private void OnTreeClick(TreeEventArgs<Known.MenuItem> e)
    {
        var item = e.Node.DataItem;
        checkAllButtons = item.GetActionCodes().ToOptions(o =>
        {
            o.Checked = Model.Data.MenuIds.Contains(o.Value);
            o.Disabled = Model.IsView;
        });

        checkAllColumns = item.GetColumnCodes().ToOptions(o =>
        {
            o.Checked = Model.Data.MenuIds.Contains(o.Value);
            o.Disabled = Model.IsView;
        });
    }

    private CheckboxOption[] checkAllButtons = [];
    private bool IndeterminateButton => checkAllButtons.Count(o => o.Checked) > 0 && checkAllButtons.Count(o => o.Checked) < checkAllButtons.Count();
    private bool CheckAllButton => checkAllButtons.All(o => o.Checked);
    private void ButtonAllChanged()
    {
        bool allChecked = CheckAllButton;
        checkAllButtons.ForEach(o => o.Checked = !allChecked);
    }

    private void OnButtonChanged(string[] items)
    {

    }

    private CheckboxOption[] checkAllColumns = [];
    private bool IndeterminateColumn => checkAllColumns.Count(o => o.Checked) > 0 && checkAllColumns.Count(o => o.Checked) < checkAllColumns.Count();
    private bool CheckAllColumn => checkAllColumns.All(o => o.Checked);
    private void ColumnAllChanged()
    {
        bool allChecked = CheckAllColumn;
        checkAllColumns.ForEach(o => o.Checked = !allChecked);
    }

    private void OnColumnChanged(string[] items)
    {
        
    }
}